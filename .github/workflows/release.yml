name: Release

on:
  # Trigger when version changes land in main
  push:
    branches: [main]
    paths:
      - 'packages/*/package.json'

  # Manual backup option
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.5.0)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect version changes
        id: version
        run: |
          # For manual trigger, use provided version
          if [ -n "${{ inputs.version }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "is_beta=$([[ "${{ inputs.version }}" =~ ^0\. ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if package versions changed
          VERSION_CHANGED=false
          CURRENT_VERSION=""

          # Get current SDK version
          if [ -f "packages/sdk/package.json" ]; then
            CURRENT_VERSION=$(grep '"version"' packages/sdk/package.json | head -1 | cut -d'"' -f4)
            PREV_VERSION=$(git show HEAD~1:packages/sdk/package.json 2>/dev/null | grep '"version"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ] && [ -n "$CURRENT_VERSION" ]; then
              VERSION_CHANGED=true
            fi
          fi

          echo "changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "is_beta=$([[ "$CURRENT_VERSION" =~ ^0\. ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Exit if no version change
        if: steps.version.outputs.changed != 'true'
        run: |
          echo "No version changes detected, skipping release"
          exit 0

      - uses: ./.github/actions/setup-project
        if: steps.version.outputs.changed == 'true'

      # Generate SDK from latest OpenAPI
      - run: pnpm generate
        if: steps.version.outputs.changed == 'true'

      # Build all packages
      - run: pnpm build
        if: steps.version.outputs.changed == 'true'

      # Run validation
      - name: Validate release
        if: steps.version.outputs.changed == 'true'
        run: |
          if [ "${{ steps.version.outputs.is_beta }}" = "true" ]; then
            echo "ðŸ”µ Beta release - running changeset validation"
            pnpm changeset:validate
          else
            echo "ðŸŸ¢ Stable release - running full compliance"
            pnpm ai:compliance
          fi

      # Create and push tag
      - name: Create release tag
        if: steps.version.outputs.changed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v${VERSION}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create tag if it doesn't exist
          if ! git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "ðŸ“Œ Creating tag $TAG"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          else
            echo "âœ… Tag $TAG already exists"
          fi

      # Configure npm
      - uses: actions/setup-node@v4
        if: steps.version.outputs.changed == 'true'
        with:
          registry-url: 'https://registry.npmjs.org'

      # Publish to npm
      - name: Publish packages
        if: steps.version.outputs.changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          if [ "${{ steps.version.outputs.is_beta }}" = "true" ]; then
            echo "ðŸ“¦ Publishing beta release to npm"
            pnpm changeset publish --tag beta
          else
            echo "ðŸ“¦ Publishing stable release to npm"
            pnpm changeset publish
          fi

          echo ""
          echo "âœ… Release complete!"
          echo ""
          echo "ðŸ“¥ Install with:"
          if [ "${{ steps.version.outputs.is_beta }}" = "true" ]; then
            echo "  npm install @airbolt/sdk@beta"
            echo "  npm install @airbolt/react-sdk@beta"
          else
            echo "  npm install @airbolt/sdk@latest"
            echo "  npm install @airbolt/react-sdk@latest"
          fi
