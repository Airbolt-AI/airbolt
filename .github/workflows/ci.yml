name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Security scan runs in parallel with validation
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Stage 1: Fast feedback (fail fast on obvious errors)
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project
        uses: ./.github/actions/setup-project

      - name: Type checking (10s)
        run: |
          echo "🔍 Stage 1: Type checking..."
          pnpm type-check

  # Stage 2: Core tests (unit and property tests)
  core-tests:
    name: Core Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: quick-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project
        uses: ./.github/actions/setup-project

      - name: Generate Fern SDK (required for SDK tests)
        run: pnpm generate

      - name: Run unit and property tests
        env:
          NODE_ENV: test
        run: |
          echo "🧪 Stage 2: Unit and property tests..."
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pnpm nx affected -t test --base=origin/main
          else
            pnpm test
          fi

  # Stage 3: Full validation (integration, build, lint)
  validate:
    name: Full Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: core-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project
        uses: ./.github/actions/setup-project

      - name: Generate Fern SDK (required for build)
        run: pnpm generate

      - name: Run full validation
        run: |
          echo "🔍 Stage 3: Full validation..."
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pnpm nx affected -t lint,build --base=origin/main
          else
            pnpm ci:check
          fi

  # Stage 4: Mutation testing (only if critical files changed)
  mutation-test:
    name: Mutation Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project
        uses: ./.github/actions/setup-project

      - name: Check if mutation testing needed
        id: check-mutation
        run: |
          echo "Checking for changes in critical business logic..."
          if git diff --name-only origin/main...HEAD | grep -qE "(apps/backend-api/src/services/openai\.|packages/sdk/src/core/token-manager\.|apps/backend-api/src/plugins/rate-limit\.)"; then
            echo "needed=true" >> "$GITHUB_OUTPUT"
            echo "Mutation testing needed - critical logic changed"
          else
            echo "needed=false" >> "$GITHUB_OUTPUT"
            echo "Mutation testing skipped - no critical logic changes"
          fi

      - name: Generate SDK for mutation testing
        if: steps.check-mutation.outputs.needed == 'true'
        run: |
          echo "📦 Generating SDK for mutation testing..."
          pnpm --filter @airbolt/sdk run generate

      - name: Build packages for mutation testing
        if: steps.check-mutation.outputs.needed == 'true'
        run: |
          echo "📦 Building only necessary packages for mutation testing..."
          pnpm --filter @airbolt/config build
          pnpm --filter @airbolt/auth build
          pnpm --filter @airbolt/types build
          pnpm --filter @airbolt/test-utils build

      - name: Run mutation testing
        if: steps.check-mutation.outputs.needed == 'true'
        env:
          NODE_ENV: test
        run: |
          echo "🧬 Stage 4: Mutation testing on critical logic..."
          pnpm test:mutation

  # Final stage: Collect results
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security, quick-check, core-tests, validate, mutation-test]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.security.result }}" != "success" || \
                "${{ needs.quick-check.result }}" != "success" || \
                "${{ needs.core-tests.result }}" != "success" || \
                "${{ needs.validate.result }}" != "success" || \
                ("${{ needs.mutation-test.result }}" != "success" && "${{ needs.mutation-test.result }}" != "skipped") ]]; then
            echo "❌ One or more CI stages failed"
            exit 1
          fi
          echo "✅ All CI stages passed"
