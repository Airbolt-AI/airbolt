name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Optional: Allow Claude to run specific commands
          allowed_tools: |
            Bash(pnpm ai:quick),
            Bash(pnpm ai:check),
            Bash(pnpm ai:compliance),
            Bash(pnpm lint),
            Bash(pnpm lint:fix),
            Bash(pnpm type-check),
            Bash(pnpm test),
            Bash(pnpm test:watch),
            Bash(pnpm build),
            Bash(pnpm affected:lint),
            Bash(pnpm affected:test),
            Bash(pnpm affected:build),
            Bash(pnpm affected:all),
            Bash(pnpm generate),
            Bash(pnpm test:config:verify),
            Bash(git status),
            Bash(git diff),
            Bash(git log --oneline -10)

          # Optional: Add custom instructions for Claude to customize its behavior for your project
          custom_instructions: |
            CRITICAL: Follow AGENTS.md guidelines strictly for the airbolt project

            Key Requirements:
            - ALL inputs MUST use Zod validation (ESLint enforced) - no direct req.body access
            - TypeScript strict mode: NO any types, explicit return types required
            - Use Fastify error patterns only (fastify.httpErrors.notFound, etc.)
            - Branch naming: feature/LIN-XXX-description format
            - Conventional commits: feat(scope): description

            Critical files requiring 85% mutation score:
            - apps/backend-api/src/services/openai.ts
            - packages/sdk/src/core/token-manager.ts
            - apps/backend-api/src/plugins/rate-limit.ts

            Development workflow:
            1. Run pnpm ai:quick frequently during development (cached, ~5s)
            2. Use pnpm lint:fix to auto-fix formatting
            3. Run pnpm test:config:verify after test changes
            4. Use pnpm affected:* commands for PR efficiency

            When creating Linear issues with MCP, ALWAYS include projectId.
            Tests must validate logic, not just achieve coverage.

          # Optional: Custom environment variables for Claude
          claude_env: |
            NODE_ENV: test
            FORCE_COLOR: 1
