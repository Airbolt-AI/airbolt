name: Claude Code Review

on:
  pull_request:
    types: [opened]
    # Optional: Only run on specific file changes
    paths:
      - 'apps/**/*.ts'
      - 'apps/**/*.tsx'
      - 'apps/**/*.js'
      - 'apps/**/*.jsx'
      - 'packages/**/*.ts'
      - 'packages/**/*.tsx'
      - 'packages/**/*.js'
      - 'packages/**/*.jsx'
      - '!**/generated/**'
      - '!**/dist/**'
      - '!examples/**'

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Review this PR with special attention to the airbolt project guidelines (AGENTS.md):

            CRITICAL Requirements:
            - TypeScript: NO any types allowed, explicit return types required (@tsconfig/strictest)
            - Validation: ALL inputs MUST use Zod schemas (ESLint enforced)
            - Error handling: ONLY use Fastify error patterns (fastify.httpErrors)
            - Testing: Tests must validate business logic, not just coverage

            File-specific review focus:
            - For TypeScript files: Strict mode compliance, proper typing, no any
            - For API endpoints (apps/backend-api): Zod validation on ALL inputs, Fastify error patterns
            - For React components (packages/react-sdk): Hooks best practices, proper state management
            - For tests: Must test edge cases (null/undefined/empty), property-based testing for business logic

            MUTATION TESTING CRITICAL FILES (require 85% mutation score):
            - apps/backend-api/src/services/openai.ts - Verify retry logic, error handling
            - packages/sdk/src/core/token-manager.ts - Check token refresh, race conditions
            - apps/backend-api/src/plugins/rate-limit.ts - Validate IP extraction, key generation

            Architecture rules:
            - Apps can depend on packages (NOT other apps)
            - Packages can depend on packages (NOT apps)

            Run validation with pnpm ai:quick to verify compliance.

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          allowed_tools: 'Bash(pnpm ai:quick),Bash(pnpm lint:fix),Bash(pnpm type-check),Bash(pnpm test),Bash(pnpm ai:mutation),Bash(pnpm affected:lint),Bash(pnpm affected:test)'

          # Optional: Skip review for certain conditions
          # Uncomment to skip review for work-in-progress or dependency updates
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]') &&
          #   !contains(github.event.pull_request.title, 'chore(deps)')
