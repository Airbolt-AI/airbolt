{
  "openapi": "3.0.0",
  "info": {
    "title": "AI Fastify Template API",
    "description": "Production-ready Fastify backend API with TypeScript and comprehensive validation",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {}
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Application health check",
        "tags": [
          "Health"
        ],
        "description": "Returns detailed health information about the application and its dependencies",
        "responses": {
          "200": {
            "description": "System is healthy or unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "description": "System is healthy or unhealthy",
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "unhealthy"
                      ],
                      "description": "Overall system health status"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Health check timestamp in ISO format"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Server uptime in seconds"
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "authGateway": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "error",
                            "not_configured"
                          ]
                        },
                        "sessionCache": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "error",
                            "not_configured"
                          ]
                        },
                        "aiProvider": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "error",
                            "not_configured"
                          ]
                        },
                        "memory": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number"
                            },
                            "available": {
                              "type": "number"
                            },
                            "percentage": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "used",
                            "available",
                            "percentage"
                          ]
                        }
                      },
                      "required": [
                        "authGateway",
                        "sessionCache",
                        "aiProvider",
                        "memory"
                      ]
                    },
                    "version": {
                      "type": "string",
                      "description": "Application version"
                    }
                  },
                  "required": [
                    "status",
                    "timestamp",
                    "uptime",
                    "checks",
                    "version"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "System is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "description": "System is unhealthy",
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "unhealthy"
                      ]
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number"
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "authGateway": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "error",
                            "not_configured"
                          ]
                        },
                        "sessionCache": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "error",
                            "not_configured"
                          ]
                        },
                        "aiProvider": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "error",
                            "not_configured"
                          ]
                        },
                        "memory": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number"
                            },
                            "available": {
                              "type": "number"
                            },
                            "percentage": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "used",
                            "available",
                            "percentage"
                          ]
                        }
                      },
                      "required": [
                        "authGateway",
                        "sessionCache",
                        "aiProvider",
                        "memory"
                      ]
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "timestamp",
                    "uptime",
                    "checks",
                    "version"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root endpoint redirect",
        "tags": [
          "Root"
        ],
        "description": "Redirects to the comprehensive health check endpoint",
        "responses": {
          "302": {
            "description": "Redirect to health check endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Redirect to health check endpoint",
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 302
                    },
                    "message": {
                      "type": "string",
                      "example": "Found. Redirecting to /health"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat": {
      "post": {
        "summary": "Send chat messages to AI",
        "tags": [
          "Chat"
        ],
        "description": "Proxies chat messages to configured AI provider and returns the assistant response",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "required": [
                        "role",
                        "content"
                      ],
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "user",
                            "assistant",
                            "system"
                          ],
                          "description": "The role of the message sender"
                        },
                        "content": {
                          "type": "string",
                          "description": "The content of the message"
                        }
                      }
                    },
                    "description": "Array of conversation messages"
                  },
                  "system": {
                    "type": "string",
                    "description": "Optional system prompt to override default"
                  },
                  "provider": {
                    "type": "string",
                    "enum": [
                      "openai",
                      "anthropic"
                    ],
                    "description": "AI provider to use (defaults to environment setting)"
                  },
                  "model": {
                    "type": "string",
                    "description": "Specific model to use (defaults to provider default)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful chat response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Successful chat response",
                  "type": "object",
                  "required": [
                    "content"
                  ],
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The AI assistant response"
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "total_tokens": {
                          "type": "number",
                          "description": "Total tokens used in the request"
                        },
                        "tokens": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number"
                            },
                            "remaining": {
                              "type": "number"
                            },
                            "limit": {
                              "type": "number"
                            },
                            "resetAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "requests": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number"
                            },
                            "remaining": {
                              "type": "number"
                            },
                            "limit": {
                              "type": "number"
                            },
                            "resetAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad Request - Invalid input",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Unauthorized - Invalid or missing JWT token",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate Limit Exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Rate Limit Exceeded",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "tokens": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number"
                            },
                            "remaining": {
                              "type": "number"
                            },
                            "limit": {
                              "type": "number"
                            },
                            "resetAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "requests": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number"
                            },
                            "remaining": {
                              "type": "number"
                            },
                            "limit": {
                              "type": "number"
                            },
                            "resetAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - AI provider API issues",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Service Unavailable - AI provider API issues",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tokens": {
      "post": {
        "summary": "Generate JWT token",
        "tags": [
          "Authentication"
        ],
        "description": "Generate a JWT token for API authentication (development endpoint)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "User identifier (optional for development)",
                    "default": "dev-user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Token generated successfully",
                  "type": "object",
                  "required": [
                    "token",
                    "expiresIn",
                    "tokenType"
                  ],
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    },
                    "expiresIn": {
                      "type": "string",
                      "description": "Token expiration time"
                    },
                    "tokenType": {
                      "type": "string",
                      "description": "Token type"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad Request",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/exchange/v2": {
      "post": {
        "summary": "Exchange provider token for session token (v2 - Infrastructure Manager)",
        "tags": [
          "Authentication"
        ],
        "description": "Enhanced token exchange using centralized infrastructure management. Provides improved rate limiting, audit logging, and provider registry integration.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token exchange successful",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Token exchange successful",
                  "type": "object",
                  "required": [
                    "sessionToken",
                    "expiresAt",
                    "provider",
                    "metadata"
                  ],
                  "properties": {
                    "sessionToken": {
                      "type": "string",
                      "description": "Internal session JWT token"
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Token expiration timestamp (ISO format)"
                    },
                    "provider": {
                      "type": "string",
                      "description": "Authentication provider used"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Additional metadata about the exchange",
                      "properties": {
                        "verificationMethod": {
                          "type": "string"
                        },
                        "rateLimitRemaining": {
                          "type": "number"
                        },
                        "infrastructureStats": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or malformed token",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad Request - Invalid input or malformed token",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing provider token",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Unauthorized - Invalid or missing provider token",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "string"
                }
              },
              "Retry-After": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Too Many Requests - Rate limit exceeded",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    },
                    "retryAfter": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/exchange/v2/health": {
      "get": {
        "summary": "Health check for auth infrastructure",
        "tags": [
          "Authentication",
          "Health"
        ],
        "description": "Returns status and statistics of auth infrastructure components",
        "responses": {
          "200": {
            "description": "Infrastructure health status",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Infrastructure health status",
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "infrastructure": {
                      "type": "object"
                    },
                    "providerRegistry": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/exchange": {
      "post": {
        "summary": "Exchange provider token for session token",
        "tags": [
          "Authentication"
        ],
        "description": "Exchange a valid provider token for an internal session token",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token exchange successful",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Token exchange successful",
                  "type": "object",
                  "required": [
                    "sessionToken",
                    "expiresAt",
                    "provider"
                  ],
                  "properties": {
                    "sessionToken": {
                      "type": "string",
                      "description": "Internal session JWT token"
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Token expiration timestamp (ISO format)"
                    },
                    "provider": {
                      "type": "string",
                      "description": "Authentication provider used"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or malformed token",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad Request - Invalid input or malformed token",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing provider token",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Unauthorized - Invalid or missing provider token",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "string"
                }
              },
              "Retry-After": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Too Many Requests - Rate limit exceeded",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    },
                    "retryAfter": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Root",
      "description": "Root endpoints"
    },
    {
      "name": "Authentication",
      "description": "Authentication endpoints"
    },
    {
      "name": "Chat",
      "description": "AI Chat endpoints"
    }
  ]
}