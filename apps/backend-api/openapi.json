{
  "openapi": "3.0.0",
  "info": {
    "title": "Airbolt API",
    "description": "OpenAI chat proxy API with JWT authentication and rate limiting",
    "version": "1.0.0",
    "contact": {
      "name": "Airbolt Team",
      "email": "support@airbolt.ai"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from /api/token endpoint"
      }
    },
    "schemas": {
      "Message": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["user", "assistant", "system"],
            "description": "The role of the message sender"
          },
          "content": {
            "type": "string",
            "description": "The content of the message"
          }
        }
      },
      "ChatRequest": {
        "type": "object",
        "required": ["messages"],
        "properties": {
          "messages": {
            "type": "array",
            "minItems": 1,
            "maxItems": 50,
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Array of conversation messages"
          },
          "system": {
            "type": "string",
            "description": "Optional system prompt to override default"
          }
        }
      },
      "ChatResponse": {
        "type": "object",
        "required": ["content"],
        "properties": {
          "content": {
            "type": "string",
            "description": "The AI assistant response"
          },
          "usage": {
            "type": "object",
            "properties": {
              "total_tokens": {
                "type": "number",
                "description": "Total tokens used in the request"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error", "message", "statusCode"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "statusCode": {
            "type": "number",
            "description": "HTTP status code"
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Get welcome message",
        "tags": ["Root"],
        "description": "Returns a hello world message for API health check",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Successful response",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Welcome message",
                      "example": "Hello World!"
                    }
                  },
                  "required": ["message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Internal Server Error",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid request parameters"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          }
        }
      }
    },
    "/api/chat": {
      "post": {
        "summary": "Send chat messages to AI",
        "tags": ["Chat"],
        "description": "Proxies chat messages to OpenAI and returns the assistant response",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple conversation",
                  "value": {
                    "messages": [
                      { "role": "user", "content": "Hello, how are you?" }
                    ]
                  }
                },
                "conversation": {
                  "summary": "Multi-turn conversation",
                  "value": {
                    "messages": [
                      {
                        "role": "user",
                        "content": "What is the capital of France?"
                      },
                      {
                        "role": "assistant",
                        "content": "The capital of France is Paris."
                      },
                      { "role": "user", "content": "What about Italy?" }
                    ]
                  }
                },
                "withSystem": {
                  "summary": "With custom system prompt",
                  "value": {
                    "messages": [
                      {
                        "role": "user",
                        "content": "Write a haiku about technology"
                      }
                    ],
                    "system": "You are a creative poetry assistant."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful chat response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                },
                "examples": {
                  "withUsage": {
                    "summary": "Response with token usage",
                    "value": {
                      "content": "Hello! I'm doing well, thank you for asking. How can I help you today?",
                      "usage": {
                        "total_tokens": 25
                      }
                    }
                  },
                  "withoutUsage": {
                    "summary": "Response without token usage",
                    "value": {
                      "content": "The capital of Italy is Rome."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "validationError": {
                    "summary": "Validation error",
                    "value": {
                      "error": "ValidationError",
                      "message": "Invalid request: messages: At least one message is required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "missingToken": {
                    "summary": "Missing authorization header",
                    "value": {
                      "error": "Unauthorized",
                      "message": "Missing or invalid authorization header",
                      "statusCode": 401
                    }
                  },
                  "invalidToken": {
                    "summary": "Invalid JWT token",
                    "value": {
                      "error": "Unauthorized",
                      "message": "Invalid or expired token",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate Limit Exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "RateLimitExceeded",
                  "message": "You have exceeded the allowed number of requests. Try again later.",
                  "statusCode": 429
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - OpenAI API issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "serviceUnavailable": {
                    "summary": "OpenAI service unavailable",
                    "value": {
                      "error": "SERVICE_UNAVAILABLE",
                      "message": "OpenAI service temporarily unavailable",
                      "statusCode": 503
                    }
                  },
                  "rateLimitOpenAI": {
                    "summary": "OpenAI rate limit",
                    "value": {
                      "error": "RATE_LIMIT_EXCEEDED",
                      "message": "Rate limit exceeded. Please try again later.",
                      "statusCode": 429
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/example/": {
      "get": {
        "summary": "Get example message",
        "tags": ["Example"],
        "description": "Returns an example string response",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Successful response",
                  "type": "string",
                  "example": "this is an example"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Internal Server Error",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid request parameters"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Root",
      "description": "Root endpoints"
    },
    {
      "name": "Chat",
      "description": "AI chat endpoints"
    },
    {
      "name": "Example",
      "description": "Example endpoints"
    }
  ]
}
