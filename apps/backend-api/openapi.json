{
  "openapi": "3.0.0",
  "info": {
    "title": "AI Fastify Template API",
    "description": "Production-ready Fastify backend API with TypeScript and comprehensive validation",
    "version": "1.0.0",
    "contact": {
      "name": "Your Name",
      "email": "your-email@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {}
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Get welcome message",
        "tags": ["Root"],
        "description": "Returns a hello world message for API health check",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Successful response",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Welcome message",
                      "example": "Hello World!"
                    }
                  },
                  "required": ["message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Internal Server Error",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid request parameters"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          }
        }
      }
    },
    "/api/token": {
      "post": {
        "summary": "Generate authentication token",
        "tags": ["Authentication"],
        "description": "Issues a JWT token for API authentication. Validates request origin against allowed origins.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "origin",
            "required": false,
            "description": "Request origin for CORS validation"
          }
        ],
        "responses": {
          "200": {
            "description": "Token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Token generated successfully",
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for API authentication"
                    },
                    "expiresIn": {
                      "type": "number",
                      "description": "Token expiration time in seconds"
                    }
                  },
                  "required": ["token", "expiresIn"]
                }
              }
            }
          },
          "403": {
            "description": "Origin not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Origin not allowed",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code"
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Rate limit exceeded",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code"
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Internal server error",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code"
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          }
        }
      }
    },
    "/example/": {
      "get": {
        "summary": "Get example message",
        "tags": ["Example"],
        "description": "Returns an example string response",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Successful response",
                  "type": "string",
                  "example": "this is an example"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Internal Server Error",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid request parameters"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    }
                  },
                  "required": ["error", "message", "statusCode"]
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Root",
      "description": "Root endpoints"
    },
    {
      "name": "Example",
      "description": "Example endpoints"
    }
  ]
}
