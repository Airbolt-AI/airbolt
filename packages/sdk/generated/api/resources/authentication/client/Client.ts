/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as AirboltAPI from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Authentication {
    export interface Options {
        environment?: core.Supplier<environments.AirboltAPIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Authentication {
    protected readonly _options: Authentication.Options;

    constructor(_options: Authentication.Options = {}) {
        this._options = _options;
    }

    /**
     * Generate a JWT token for API authentication (development endpoint)
     *
     * @param {AirboltAPI.PostApiTokensRequest} request
     * @param {Authentication.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirboltAPI.BadRequestError}
     *
     * @example
     *     await client.authentication.generateJwtToken()
     */
    public generateJwtToken(
        request: AirboltAPI.PostApiTokensRequest = {},
        requestOptions?: Authentication.RequestOptions,
    ): core.HttpResponsePromise<AirboltAPI.PostApiTokensResponse> {
        return core.HttpResponsePromise.fromPromise(this.__generateJwtToken(request, requestOptions));
    }

    private async __generateJwtToken(
        request: AirboltAPI.PostApiTokensRequest = {},
        requestOptions?: Authentication.RequestOptions,
    ): Promise<core.WithRawResponse<AirboltAPI.PostApiTokensResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirboltAPIEnvironment.Default,
                "api/tokens",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirboltAPI.PostApiTokensResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new AirboltAPI.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.AirboltAPIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirboltAPIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirboltAPITimeoutError("Timeout exceeded when calling POST /api/tokens.");
            case "unknown":
                throw new errors.AirboltAPIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
